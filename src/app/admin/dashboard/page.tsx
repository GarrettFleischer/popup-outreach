"use client";

import { useState } from "react";
import { useAuth } from "@/contexts/AuthContext";
import { createClient } from "@/utils/supabase/client";
import { Button } from "@/components/ui/Button";

interface CreateEventForm {
  name: string;
  date: string;
  description: string;
}

export default function AdminDashboard() {
  const { user } = useAuth();
  const [showCreateEvent, setShowCreateEvent] = useState(false);
  const [creatingEvent, setCreatingEvent] = useState(false);
  const [eventForm, setEventForm] = useState<CreateEventForm>({
    name: "",
    date: "",
    description: "",
  });
  const supabase = createClient();

  const handleCreateEvent = async (e: React.FormEvent) => {
    e.preventDefault();
    setCreatingEvent(true);

    try {
      const { error } = await supabase.from("events").insert({
        name: eventForm.name,
        date: eventForm.date,
        description: eventForm.description,
        created_by: user?.profile?.id,
        url_slug: "", // This will be auto-generated by the database trigger
      });

      if (error) {
        console.error("Error creating event:", error);
        alert("Failed to create event. Please try again.");
      } else {
        alert("Event created successfully!");
        setEventForm({ name: "", date: "", description: "" });
        setShowCreateEvent(false);
      }
    } catch (error) {
      console.error("Error creating event:", error);
      alert("Failed to create event. Please try again.");
    } finally {
      setCreatingEvent(false);
    }
  };

  return (
    <div className="p-6">
      <h1 className="text-3xl font-bold text-gray-900 mb-6">Admin Dashboard</h1>

      <div className="bg-white rounded-lg shadow p-6">
        <p className="text-gray-600 mb-6">
          Welcome to the admin dashboard. This is where you can manage your
          application.
        </p>

        <div className="grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-6">
          <div className="bg-blue-50 p-4 rounded-lg">
            <h3 className="font-semibold text-blue-900">User Management</h3>
            <p className="text-blue-700 text-sm mt-2">
              Manage user accounts and permissions
            </p>
          </div>

          <div className="bg-green-50 p-4 rounded-lg">
            <h3 className="font-semibold text-green-900">Event Management</h3>
            <p className="text-green-700 text-sm mt-2">
              Create and manage events
            </p>
            <button
              onClick={() => setShowCreateEvent(true)}
              className="mt-3 bg-green-600 text-white px-4 py-2 rounded-md text-sm hover:bg-green-700 transition-colors duration-200"
            >
              Create Event
            </button>
          </div>

          <div className="bg-purple-50 p-4 rounded-lg">
            <h3 className="font-semibold text-purple-900">Analytics</h3>
            <p className="text-purple-700 text-sm mt-2">
              View application analytics and reports
            </p>
          </div>
        </div>

        <div className="mt-8 p-4 bg-gray-50 rounded-lg">
          <h3 className="font-semibold text-gray-900 mb-2">
            Account Information
          </h3>
          <div className="text-sm text-gray-600 space-y-1">
            <p>
              <strong>Email:</strong> {user?.email}
            </p>
            <p>
              <strong>Name:</strong> {user?.profile?.first_name}{" "}
              {user?.profile?.last_name}
            </p>
            <p>
              <strong>Admin Level:</strong>{" "}
              {user?.profile?.profile_permissions?.permission_level}
            </p>
          </div>
        </div>
      </div>

      {/* Create Event Modal */}
      {showCreateEvent && (
        <div className="fixed inset-0 bg-gray-600 bg-opacity-50 overflow-y-auto h-full w-full z-50">
          <div className="relative top-20 mx-auto p-5 border w-96 shadow-lg rounded-md bg-white">
            <div className="mt-3">
              <h3 className="text-lg font-medium text-gray-900 mb-4">
                Create New Event
              </h3>

              <form onSubmit={handleCreateEvent} className="space-y-4">
                <div>
                  <label
                    htmlFor="eventName"
                    className="block text-sm font-medium text-gray-700 mb-1"
                  >
                    Event Name *
                  </label>
                  <input
                    type="text"
                    id="eventName"
                    required
                    value={eventForm.name}
                    onChange={(e) =>
                      setEventForm((prev) => ({
                        ...prev,
                        name: e.target.value,
                      }))
                    }
                    className="w-full px-3 py-2 border border-gray-300 rounded-md shadow-sm focus:outline-none focus:ring-indigo-500 focus:border-indigo-500"
                    placeholder="Enter event name"
                  />
                </div>

                <div>
                  <label
                    htmlFor="eventDate"
                    className="block text-sm font-medium text-gray-700 mb-1"
                  >
                    Event Date *
                  </label>
                  <input
                    type="date"
                    id="eventDate"
                    required
                    value={eventForm.date}
                    onChange={(e) =>
                      setEventForm((prev) => ({
                        ...prev,
                        date: e.target.value,
                      }))
                    }
                    className="w-full px-3 py-2 border border-gray-300 rounded-md shadow-sm focus:outline-none focus:ring-indigo-500 focus:border-indigo-500"
                  />
                </div>

                <div>
                  <label
                    htmlFor="eventDescription"
                    className="block text-sm font-medium text-gray-700 mb-1"
                  >
                    Description
                  </label>
                  <textarea
                    id="eventDescription"
                    rows={3}
                    value={eventForm.description}
                    onChange={(e) =>
                      setEventForm((prev) => ({
                        ...prev,
                        description: e.target.value,
                      }))
                    }
                    className="w-full px-3 py-2 border border-gray-300 rounded-md shadow-sm focus:outline-none focus:ring-indigo-500 focus:border-indigo-500"
                    placeholder="Enter event description"
                  />
                </div>

                <div className="flex justify-end space-x-3 pt-4">
                  <Button
                    type="button"
                    variant="outline"
                    onClick={() => setShowCreateEvent(false)}
                  >
                    Cancel
                  </Button>
                  <Button
                    type="submit"
                    variant="primary"
                    disabled={creatingEvent}
                  >
                    {creatingEvent ? "Creating..." : "Create Event"}
                  </Button>
                </div>
              </form>
            </div>
          </div>
        </div>
      )}
    </div>
  );
}
