"use client";

import { useState } from "react";
import { Button } from "@/components/ui/Button";
import { createClient } from "@/utils/supabase/client";
import { useAuth } from "@/contexts/AuthContext";

interface CreateEventForm {
  name: string;
  date: string;
  time: string;
  endDate: string;
  endTime: string;
  description: string;
}

interface CreateEventDialogProps {
  isOpen: boolean;
  onClose: () => void;
  onEventCreated: () => void;
}

export default function CreateEventDialog({
  isOpen,
  onClose,
  onEventCreated,
}: CreateEventDialogProps) {
  const { user } = useAuth();
  const [creatingEvent, setCreatingEvent] = useState(false);
  const [eventForm, setEventForm] = useState<CreateEventForm>({
    name: "",
    date: "",
    time: "12:00",
    endDate: "",
    endTime: "13:00",
    description: "",
  });

  const supabase = createClient();

  // Helper function to ensure end date/time is valid
  const ensureValidEndDateTime = (
    startDate: string,
    startTime: string,
    endDate: string,
    endTime: string
  ) => {
    const startDateTime = new Date(`${startDate}T${startTime}`);
    const endDateTime = new Date(`${endDate}T${endTime}`);

    if (endDateTime <= startDateTime) {
      // End time is before or equal to start time, adjust it
      const adjustedEndDateTime = new Date(
        startDateTime.getTime() + 60 * 60 * 1000
      ); // Add 1 hour
      return {
        endDate: adjustedEndDateTime.toISOString().split("T")[0],
        endTime: adjustedEndDateTime.toTimeString().slice(0, 5),
      };
    }

    return { endDate, endTime };
  };

  const handleCreateEvent = async (e: React.FormEvent) => {
    e.preventDefault();
    setCreatingEvent(true);

    try {
      // Validate that end date/time is after start date/time
      const startDateTime = new Date(`${eventForm.date}T${eventForm.time}`);
      const endDateTime = new Date(`${eventForm.endDate}T${eventForm.endTime}`);

      if (endDateTime <= startDateTime) {
        alert("End date and time must be after start date and time");
        setCreatingEvent(false);
        return;
      }

      // Combine date and time and convert to UTC
      // The user enters time in their local timezone, so we need to create a local datetime
      // and then convert it to UTC for storage
      const localDateTime = new Date(`${eventForm.date}T${eventForm.time}`);

      // Convert local datetime to UTC (this handles the timezone conversion correctly)
      const utcDateTime = new Date(localDateTime.toISOString());

      // Combine end date and time and convert to UTC
      const localEndDateTime = new Date(
        `${eventForm.endDate}T${eventForm.endTime}`
      );

      // Convert local end datetime to UTC (this handles the timezone conversion correctly)
      const utcEndDateTime = new Date(localEndDateTime.toISOString());

      const { error } = await supabase.from("events").insert({
        name: eventForm.name,
        date: utcDateTime.toISOString(),
        end_date: utcEndDateTime.toISOString(),
        description: eventForm.description,
        created_by: user?.profile?.user_id,
        url_slug: "", // This will be auto-generated by the database trigger
      });

      if (error) {
        console.error("Error creating event:", error);
        alert("Failed to create event. Please try again.");
      } else {
        // Reset form
        setEventForm({
          name: "",
          date: "",
          time: "12:00",
          endDate: "",
          endTime: "13:00",
          description: "",
        });
        onEventCreated();
        onClose();
      }
    } catch (error) {
      console.error("Error creating event:", error);
      alert("Failed to create event. Please try again.");
    } finally {
      setCreatingEvent(false);
    }
  };

  if (!isOpen) return null;

  return (
    <div className="fixed inset-0 bg-gray-600 bg-opacity-50 overflow-y-auto h-full w-full z-50">
      <div className="relative top-20 mx-auto p-5 border w-96 shadow-lg rounded-md bg-white">
        <div className="mt-3">
          <div className="flex justify-between items-center mb-4">
            <h3 className="text-lg font-medium text-gray-900">
              Create New Event
            </h3>
            <Button type="button" variant="outline" size="sm" onClick={onClose}>
              âœ•
            </Button>
          </div>

          <form onSubmit={handleCreateEvent} className="space-y-4">
            <div>
              <label
                htmlFor="eventName"
                className="block text-sm font-medium text-gray-900 mb-1"
              >
                Event Name *
              </label>
              <input
                type="text"
                id="eventName"
                required
                value={eventForm.name}
                onChange={(e) =>
                  setEventForm((prev) => ({
                    ...prev,
                    name: e.target.value,
                  }))
                }
                className="w-full px-3 py-2 border border-gray-300 rounded-md shadow-sm focus:outline-none focus:ring-indigo-500 focus:border-indigo-500 text-gray-900 bg-white"
                placeholder="Enter event name"
              />
            </div>

            <div className="grid grid-cols-2 gap-4">
              <div>
                <label
                  htmlFor="eventDate"
                  className="block text-sm font-medium text-gray-900 mb-1"
                >
                  Event Date *
                </label>
                <input
                  type="date"
                  id="eventDate"
                  required
                  value={eventForm.date}
                  onChange={(e) => {
                    const newDate = e.target.value;
                    setEventForm((prev) => {
                      // Auto-set end date to match start date if it's not already set
                      let newEndDate = prev.endDate || newDate;

                      // If end date is now before start date, set it to start date
                      if (newEndDate < newDate) {
                        newEndDate = newDate;
                      }

                      // Ensure end time is valid for the new dates
                      const { endTime } = ensureValidEndDateTime(
                        newDate,
                        prev.time,
                        newEndDate,
                        prev.endTime
                      );

                      return {
                        ...prev,
                        date: newDate,
                        endDate: newEndDate,
                        endTime,
                      };
                    });
                  }}
                  className="w-full px-3 py-2 border border-gray-300 rounded-md shadow-sm focus:outline-none focus:ring-indigo-500 focus:border-indigo-500 text-gray-900 bg-white"
                />
              </div>
              <div>
                <label
                  htmlFor="eventTime"
                  className="block text-sm font-medium text-gray-900 mb-1"
                >
                  Event Time (
                  {
                    new Date()
                      .toLocaleTimeString("en-US", { timeZoneName: "short" })
                      .split(" ")[2]
                  }
                  ) *
                </label>
                <input
                  type="time"
                  id="eventTime"
                  required
                  value={eventForm.time}
                  onChange={(e) => {
                    const newTime = e.target.value;
                    setEventForm((prev) => {
                      // Calculate end time 1 hour after start time
                      const [hours, minutes] = newTime.split(":").map(Number);
                      const endHours = (hours + 1) % 24;
                      const endTime = `${endHours
                        .toString()
                        .padStart(2, "0")}:${minutes
                        .toString()
                        .padStart(2, "0")}`;

                      // Check if current end time would be before start time
                      let newEndTime = prev.endTime || endTime;
                      if (prev.date === prev.endDate) {
                        // Same date, check if end time is before start time
                        const [endHours, endMinutes] = newEndTime
                          .split(":")
                          .map(Number);
                        if (
                          endHours < hours ||
                          (endHours === hours && endMinutes <= minutes)
                        ) {
                          newEndTime = endTime; // Set to 1 hour after start time
                        }
                      }

                      // Ensure end date/time is valid
                      const { endDate, endTime: validEndTime } =
                        ensureValidEndDateTime(
                          prev.date,
                          newTime,
                          prev.endDate,
                          newEndTime
                        );

                      return {
                        ...prev,
                        time: newTime,
                        endDate,
                        endTime: validEndTime,
                      };
                    });
                  }}
                  className="w-full px-3 py-2 border border-gray-300 rounded-md shadow-sm focus:outline-none focus:ring-indigo-500 focus:border-indigo-500 text-gray-900 bg-white"
                />
              </div>
            </div>

            <div className="grid grid-cols-2 gap-4">
              <div>
                <label
                  htmlFor="eventEndDate"
                  className="block text-sm font-medium text-gray-900 mb-1"
                >
                  End Date *
                </label>
                <input
                  type="date"
                  id="eventEndDate"
                  required
                  value={eventForm.endDate}
                  onChange={(e) => {
                    const newEndDate = e.target.value;
                    setEventForm((prev) => {
                      // Ensure end date is not before start date
                      if (newEndDate < prev.date) {
                        return prev; // Don't update if invalid
                      }

                      return {
                        ...prev,
                        endDate: newEndDate,
                      };
                    });
                  }}
                  className="w-full px-3 py-2 border border-gray-300 rounded-md shadow-sm focus:outline-none focus:ring-indigo-500 focus:border-indigo-500 text-gray-900 bg-white"
                />
              </div>
              <div>
                <label
                  htmlFor="eventEndTime"
                  className="block text-sm font-medium text-gray-900 mb-1"
                >
                  End Time *
                </label>
                <input
                  type="time"
                  id="eventEndTime"
                  required
                  value={eventForm.endTime}
                  onChange={(e) => {
                    const newEndTime = e.target.value;
                    setEventForm((prev) => {
                      // If same date, ensure end time is after start time
                      if (prev.date === prev.endDate) {
                        const [startHours, startMinutes] = prev.time
                          .split(":")
                          .map(Number);
                        const [endHours, endMinutes] = newEndTime
                          .split(":")
                          .map(Number);

                        if (
                          endHours < startHours ||
                          (endHours === startHours &&
                            endMinutes <= startMinutes)
                        ) {
                          return prev; // Don't update if invalid
                        }
                      }

                      return {
                        ...prev,
                        endTime: newEndTime,
                      };
                    });
                  }}
                  className="w-full px-3 py-2 border border-gray-300 rounded-md shadow-sm focus:outline-none focus:ring-indigo-500 focus:border-indigo-500 text-gray-900 bg-white"
                />
              </div>
            </div>

            <div>
              <label
                htmlFor="eventDescription"
                className="block text-sm font-medium text-gray-900 mb-1"
              >
                Description
              </label>
              <textarea
                id="eventDescription"
                rows={3}
                value={eventForm.description}
                onChange={(e) =>
                  setEventForm((prev) => ({
                    ...prev,
                    description: e.target.value,
                  }))
                }
                className="w-full px-3 py-2 border border-gray-300 rounded-md shadow-sm focus:outline-none focus:ring-indigo-500 focus:border-indigo-500 text-gray-900 bg-white"
                placeholder="Enter event description"
              />
            </div>

            <div className="flex justify-end space-x-3 pt-4">
              <Button type="button" variant="outline" onClick={onClose}>
                Cancel
              </Button>
              <Button type="submit" variant="primary" disabled={creatingEvent}>
                {creatingEvent ? "Creating..." : "Create Event"}
              </Button>
            </div>
          </form>
        </div>
      </div>
    </div>
  );
}
